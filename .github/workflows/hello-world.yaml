name: Build hello-world application

on:
  push:
    paths:
      - 'hello-world/**'
      - '!hello-world/README.md'
      - '.github/workflows/hello-world.yaml'
jobs:
  build:
    runs-on: ubuntu-latest
    env:   
      EXREPO: acap-computer-vision-examples-sandbox
      EXNAME: hello-world    

    strategy:
      matrix:
        include:
          - arch: aarch64
          # - arch: armv7hf

    steps: 
      - uses: actions/checkout@v2
      - name: Loop for spending time.
        run: | 
          for i in {1..5}; do
              sleep 1
              echo $i
          done

      - name: Build the image.
        run: |
          export ARCH=aarch64
          export APP_NAME=hello-world
          echo $(pwd)
          cd ${{env.EXNAME}}
          echo $(pwd)
          docker build --tag ${{env.EXNAME}} --build-arg ${{ matrix.arch }} .
      - name: create certificate for handshake.
        run: |
          echo $(pwd)
          cd hello-world/tls-certs chmod +x tls_setup.sh
          echo $(pwd)
          sh tls_setup.sh 172.25.65.98 dockerdwrapper


      - name: Set your device IP address and clear Docker memory.
        env: 
          DOCKER_PORT: 2376
          DEVICE_IP: "172.25.65.98"
        run: |
          echo "$DOCKER_PORT"
          echo "$DEVICE_IP"
        # docker --tlsverify --host tcp://$DEVICE_IP:$DOCKER_PORT system prune --all --force




    # steps:
    #   - uses: actions/checkout@v2
    #   - uses: docker/setup-buildx-action@v2
    #     with:
    #       install: true
      # - name: can i reach the camera
      #   run: |
      #     ping 172.25.65.98
      # - name: Get the architecture from the camera
      #   run: |
      #     ok=$(curl -v -s --noproxy '*' --anyauth -u root:"pass" -k --header "Content-Type: application/json" --request POST --data '{"apiVersion":"1.0", "method":"getProperties", "params": {"propertyList": ["Architecture"]}}' http://172.25.65.98/axis-cgi/basicdeviceinfo.cgi)
      #     echo  "response from curl= $ok" 
      #     ok=${ok#*Architecture}
      #     echo "test=$(echo $ok | cut -d '"' -f 3)" >> $GITHUB_ENV
      #     echo ok=$(echo $ok | cut -d '"' -f 3)

      # - name: Build ${{ env.example }} application
      #   env:
      #     example: ${{ env.EXNAME }}
      #     imagetag: ${{ env.EXREPO }}_${{ env.EXNAME }}:1.0
      #   run: |
      #     cd $EXNAME
      #     docker build --no-cache --build-arg ARCH=${{ matrix.arch }} --tag $imagetag .
      

      


        