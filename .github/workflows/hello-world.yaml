name: Build hello-world application

on: 
  push: 
    paths:
      - 'hello-world/**'
      - '!hello-world/README.md'
      - '.github/workflows/hello-world.yaml'
jobs:
  build:
    runs-on: self-hosted 
    env:   
      EXREPO: acap-computer-vision-examples-sandbox
      EXNAME: hello-world    
      WORKDIR: acap-computer-vision-sdk-examples-sandbox\hello-world
    strategy:
      matrix:
        include:   
          - arch: aarch64
          # - arch: armv7hf

    steps:   
      - uses: actions/checkout@v2

      - name: test to get architecture on another camera
        env: 
          DEVICE_IP: "172.25.65.98"
          DEVICE_PASSWORD: 'pass'
        run: |
          ok=$(curl -v -s --noproxy '*' --anyauth -u root:"pass" -k --header "Content-Type: application/json" --request POST --data '{"apiVersion":"1.0","method":"getProperties", "params": {"propertyList": ["Architecture"]}}' http://172.25.65.98/axis-cgi/basicdeviceinfo.cgi)
          echo  "response from curl= $ok" 
          ok=${ok#*Architecture}
          echo "test=$(echo $ok | cut -d '"' -f 3)" >> $GITHUB_ENV
          echo ok=$(echo $ok | cut -d '"' -f 3)
        # curl -s --anyauth -u root:"pass" "http://172.25.65.98/axis-cgi/param.cgi?action=update&root.Network.SSH.Enabled=yes"
        # ssh root@"pass" 'command -v containerd >/dev/null 2>&1 && echo Compatible with Docker ACAP || echo Not compatible with Docker ACAP'
          
      - name: get the requirements
        run: |
          echo $(pwd)
          docker buildx install
          docker buildx version
          docker --version

      - name: installing daemon
        run: |
          cd /home/fadelb/actions-runner/_work/acap-computer-vision-sdk-examples-sandbox/acap-computer-vision-sdk-examples-sandbox/hello-world
          echo $(pwd)
          docker run --rm axisecp/docker-acap:latest-aarch64 172.25.65.98 pass install

        # Start and Get logs not working different structure!!
        # curl -s -v -u root:"pass" "http://172.25.65.98/axis-cgi/applications/control.cgi?action=start&package=simply_hello"
        # curl -s --noproxy '*' --anyauth -u root:"pass" -k --header "Content-Type: application/json" http://172.25.65.98/axis-cgi/admin/systemlog.cgi?appname=simply_hello
         
      - name: create certificate for handshake.
        run: | 
          cd hello-world/tls-certs
          echo $(pwd)
          chmod +x tls_setup.sh 
          echo $(pwd)
          sh -v tls_setup.sh 172.25.65.98 dockerdwrapper

      - name: get version client and server
        run: | 
          echo $(pwd)
          cd /home/fadelb/actions-runner/_work/acap-computer-vision-sdk-examples-sandbox/acap-computer-vision-sdk-examples-sandbox/hello-world/tls-certs
          echo $(pwd)
          ls
          curl -s --anyauth -u root:"pass" "http://172.25.65.98/axis-cgi/param.cgi?action=update&root.dockerdwrapper.UseTLS=yes"
      #     docker -v --tlsverify --tlscacert=ca.pem --tlscert=cert.pem --tlskey=key.pem -H=172.25.65.98:2376 version 

  hello-world-app:
    runs-on: self-hosted
    needs: build
    env:   
      EXREPO: acap-computer-vision-examples-sandbox
      EXNAME: hello-world    
      WORKDIR: acap-computer-vision-sdk-examples-sandbox\hello-world
    steps:
      - name: Build the image.
        run: |
          echo $(pwd)
          cd /home/fadelb/actions-runner/_work/acap-computer-vision-sdk-examples-sandbox/acap-computer-vision-sdk-examples-sandbox/hello-world/
          echo $(pwd)
          docker build --tag hello-world--build-arg aarch64 .
      
      - name: Set your device IP address and clear Docker memory.
        run: |
          docker --tlsverify --host tcp://172.25.65.98:2376 system prune --all --force

      - name:
        run: |
          docker save ${{env.APP_NAME}} | docker --tlsverify --host tcp://172.25.65.98:2376 load

      # - name: Set your device IP address and clear Docker memory.
      #   env: 
      #     DOCKER_PORT: 2376
      #     DEVICE_IP: "172.25.65.98"
      #     DOCKER_CERT_PATH: "hello-world/tls-certs"
      #   run: |  
      #     echo $(pwd)
      #     cd /home/johanol/actions-runner-fadel/_work/acap-computer-vision-sdk-examples-sandbox/acap-computer-vision-sdk-examples-sandbox/hello-world/tls-certs
      #     echo $(pwd)
      #     ls
      #     docker -v --tlsverify --host tcp://$DEVICE_IP:$DOCKER_PORT system prune --all --force
        
    # steps:
    #   - uses: actions/checkout@v2
    #   - uses: docker/setup-buildx-action@v2
    #     with:
    #       install: true
      # - name: Build ${{ env.example }} application
      #   env:
      #     example: ${{ env.EXNAME }}
      #     imagetag: ${{ env.EXREPO }}_${{ env.EXNAME }}:1.0
      #   run: |
      #     cd $EXNAME
      #     docker build --no-cache --build-arg ARCH=${{ matrix.arch }} --tag $imagetag .
      

      


        