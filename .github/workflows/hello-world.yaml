name: Build hello-world application

on:
  push:
    paths:
      - 'hello-world/**'
      - '!hello-world/README.md'
      - '.github/workflows/hello-world.yaml'
jobs:
  build:
    runs-on: self-hosted 
    env:   
      EXREPO: acap-computer-vision-examples-sandbox
      EXNAME: hello-world    
      WORKDIR: acap-computer-vision-sdk-examples-sandbox\hello-world
    strategy:
      matrix:
        include:
          - arch: aarch64
          # - arch: armv7hf

    steps: 
      - uses: actions/checkout@v2
      # - name: Loop for spending time.
      #   run: | 
      #     for i in {1..5}; do
      #         sleep 1
      #         echo $i
      #     done

      - name: Build the image.
        run: |
          echo $(pwd)
          cd ${{env.EXNAME}}
          echo $(pwd)
          docker build --tag ${{env.EXNAME}} --build-arg ${{ matrix.arch }} .
        # export ARCH=aarch64
        # export APP_NAME=hello-world

      - name: create certificate for handshake.
        run: |
          cd hello-world/tls-certs
          echo $(pwd)
          chmod +x tls_setup.sh
          echo $(pwd)
          sh -v tls_setup.sh 172.25.65.98 dockerdwrapper
        # TODO.. 
        # i have to copy the 3 certs to the camera using scp but the problem is behind the access denied.
                   
      - name: Set your device IP address and clear Docker memory.
        env: 
          DOCKER_PORT: 2376
          DEVICE_IP: "172.25.65.98"
          DOCKER_CERT_PATH: hello-world\tls-certs
        run: |
          echo "$DOCKER_PORT"
          echo "$DEVICE_IP"
          echo $(pwd)
        # export DOCKER_CERT_PATH="hello-world\tls-certs"
        # docker -v --tlsverify -H=$DEVICE_IP:$DOCKER_PORT version
          
        # docker --tlsverify --host tcp://$DEVICE_IP:$DOCKER_PORT system prune --all --force




    # steps:
    #   - uses: actions/checkout@v2
    #   - uses: docker/setup-buildx-action@v2
    #     with:
    #       install: true
      # - name: Build ${{ env.example }} application
      #   env:
      #     example: ${{ env.EXNAME }}
      #     imagetag: ${{ env.EXREPO }}_${{ env.EXNAME }}:1.0
      #   run: |
      #     cd $EXNAME
      #     docker build --no-cache --build-arg ARCH=${{ matrix.arch }} --tag $imagetag .
      

      


        