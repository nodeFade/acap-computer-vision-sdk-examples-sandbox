name: threat-modeling
on:
  push: 
    paths:  
      - 'acap/**'
      - '.github/workflows/acap.yaml'
      - '.github/workflows/hello-world.yaml'
      - '.github/workflows/threat-model-test.yaml'

jobs:       
  build:
    runs-on: self-hosted
    container:
      image: python:3.9
    env:   
      EXREPO: acap-computer-vision-examples-sandbox 
      WORKDIR: acap-computer-vision-sdk-examples-sandbox
    strategy:
      matrix:
        include:   
          - arch: aarch64
          # - arch: armv7hf  
            
    steps:
      - uses: actions/checkout@v2
      - name: test to get architecture on another camera
        env: 
          DEVICE_IP: ${{ secrets.DEVICE_IP }}
          DEVICE_PASSWORD: 'pass'
        run: |
          ok=$(curl -v -s --noproxy '*' --anyauth -u ${{ secrets.ROOT_USERNAME }}:${{ secrets.ROOT_PASSWORD }} -k --header "Content-Type: application/json" --request POST --data '{"apiVersion":"1.0","method":"getProperties", "params": {"propertyList": ["Architecture"]}}' http://${{ secrets.DEVICE_IP }}/axis-cgi/basicdeviceinfo.cgi)
          echo  "response from curl= $ok" 
          ok=${ok#*Architecture}
          echo "test=$(echo $ok | cut -d '"' -f 3)" >> $GITHUB_ENV
          echo ok=$(echo $ok | cut -d '"' -f 3)

      # - name: get the requirements
      #   run: |
      #     echo $(pwd)
      #     ls
      #     docker buildx install
      #     docker buildx version
      #     docker --version

      # - name: verify root can remove daomen if installed.
      #   run: |
      #     curl --noproxy '*' -k --anyauth -u ${{ secrets.ROOT_USERNAME}}:${{ secrets.ROOT_PASSWORD }} --header "Content-Type: application/json"  "https://${{ secrets.DEVICE_IP }}/axis-cgi/applications/control.cgi?action=remove&package=dockerdwrapper"

      - name: installing daemon
        run: |
          curl -s --anyauth -u ${{ secrets.ROOT_USERNAME }}:${{secrets.ROOT_PASSWORD}} "http://${{ secrets.DEVICE_IP }}/axis-cgi/param.cgi?action=update&root.Network.SSH.Enabled=yes"
          sshpass -p "pass" ssh root@172.25.65.98 'command -v containerd >/dev/null 2>&1 && echo Compatible with Docker ACAP || echo Not compatible with Docker ACAP'
          docker run --rm axisecp/docker-acap:latest-aarch64 ${{ secrets.ROOT_USERNAME }} ${{ secrets.ROOT_PASSWORD }} install
        # echo $(pwd)
        # cd /acap-computer-vision-sdk-examples-sandbox
      
      - name: create certificate for handshake.
        run: | 
          cd /home/fadelb/actions-runner/_work/acap-computer-vision-sdk-examples-sandbox/acap-computer-vision-sdk-examples-sandbox/tls-certs
          echo $(pwd)
          chmod +x tls_setup.sh 
          echo $(pwd)
          sh -v tls_setup.sh ${{ secrets.DEVICE_IP }} dockerdwrapper

      - name: move the required files to required place.
        run: |
          cd /home/fadelb/actions-runner/_work/acap-computer-vision-sdk-examples-sandbox/acap-computer-vision-sdk-examples-sandbox/tls-certs
          cp ca.pem key.pem cert.pem ../../../../../
          cd ../../../../../
          mv ca.pem key.pem cert.pem ./.docker
          chmod 600 ./.docker   
          chmod -R 755 ./.docker 
        # chmod 600 to use file permissions to secure sensitive files by making them readable and writable only by the owner.
        # chmod -R 755 set permissions on a directory and all of its contents recursively using the -R option with the chmod.

      - name: Install dependencies
        run: |
          cd "$GITHUB_WORKSPACE"
          sudo apt-get update && sudo apt-get install python3.9 -y
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install requests

      - name: Run the python file with secret credentials.
        run: |
          python $GITHUB_WORKSPACE/threatCases.py ${{ secrets.DEVICE_IP }} ${{ secrets.ROOT_USERNAME}} ${{ secrets.ROOT_PASSWORD }} ${{ secrets.USER_USERNAME }} ${{ secrets.USER_PASSWORD }} ${{ secrets.OPERATOR_USERNAME }}  ${{ secrets.OPERATOR_PASSWORD }}  
        env:
          PYTHONUNBUFFERED: 1
 