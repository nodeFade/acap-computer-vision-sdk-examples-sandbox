name: Build acap application
on:
  push: 
    paths:  
      - 'acap/**'
      - '.github/workflows/acap.yaml'

jobs:
  build:
    runs-on: self-hosted
    env:   
      EXREPO: acap-computer-vision-examples-sandbox 
      WORKDIR: acap-computer-vision-sdk-examples-sandbox
    strategy:
      matrix:
        include:   
          - arch: aarch64
          # - arch: armv7hf

    steps:   
      - uses: actions/checkout@v2
      - name: test to get architecture on another camera
        env: 
          DEVICE_IP: "172.25.65.98"
          DEVICE_PASSWORD: 'pass'
        run: |
          ok=$(curl -v -s --noproxy '*' --anyauth -u root:"pass" -k --header "Content-Type: application/json" --request POST --data '{"apiVersion":"1.0","method":"getProperties", "params": {"propertyList": ["Architecture"]}}' http://172.25.65.98/axis-cgi/basicdeviceinfo.cgi)
          echo  "response from curl= $ok" 
          ok=${ok#*Architecture}
          echo "test=$(echo $ok | cut -d '"' -f 3)" >> $GITHUB_ENV
          echo ok=$(echo $ok | cut -d '"' -f 3)
        # curl -s --anyauth -u root:"pass" "http://172.25.65.98/axis-cgi/param.cgi?action=update&root.Network.SSH.Enabled=yes"
        # ssh root@"pass" 'command -v containerd >/dev/null 2>&1 && echo Compatible with Docker ACAP || echo Not compatible with Docker ACAP'
          
      - name: get the requirements
        run: |
          echo $(pwd)
          docker buildx install
          docker buildx version
          docker --version

      - name: installing daemon
        run: |
          cd /home/fadelb/actions-runner/_work/acap-computer-vision-sdk-examples-sandbox/acap-computer-vision-sdk-examples-sandbox
          echo $(pwd)
          docker run --rm axisecp/docker-acap:latest-aarch64 172.25.65.98 pass install
        
        # Start and Get logs not working different structure!!
        # curl -s -v -u root:"pass" "http://172.25.65.98/axis-cgi/applications/control.cgi?action=start&package=simply_hello"
        # curl -s --noproxy '*' --anyauth -u root:"pass" -k --header "Content-Type: application/json" http://172.25.65.98/axis-cgi/admin/systemlog.cgi?appname=simply_hello
         
      - name: create certificate for handshake.
        run: | 
          cd /home/fadelb/actions-runner/_work/acap-computer-vision-sdk-examples-sandbox/acap-computer-vision-sdk-examples-sandbox/tls-certs
          echo $(pwd)
          chmod +x tls_setup.sh 
          echo $(pwd)
          sh -v tls_setup.sh 172.25.65.98 dockerdwrapper

      - name: move required files to required place.
        run: |
          cd /home/fadelb/actions-runner/_work/acap-computer-vision-sdk-examples-sandbox/acap-computer-vision-sdk-examples-sandbox/tls-certs
          cp ca.pem key.pem cert.pem ../../../../../
          cd ../../../../../
          mv ca.pem key.pem cert.pem ./.docker
          chmod 600 ./.docker   
          chmod -R 755 ./.docker 
        # chmod 600 to use file permissions to secure sensitive files by making them readable and writable only by the owner.
        # chmod -R 755 set permissions on a directory and all of its contents recursively using the -R option with the chmod.

      - name: get version client and server
        run: | 
          echo $(pwd)
          cd /home/fadelb/actions-runner/_work/acap-computer-vision-sdk-examples-sandbox/acap-computer-vision-sdk-examples-sandbox/tls-certs
          echo $(pwd)
          ls
          curl -s --anyauth -u root:"pass" "http://172.25.65.98/axis-cgi/param.cgi?action=update&root.dockerdwrapper.UseTLS=yes"

      # TO RUN THIS COMMAND, MUST FIRST RUN THE DAEMON MANUALLY IN THE UI/INTERFACE AND FILL THE SETTINGS FOR TLS.
      # docker -v --tlsverify --tlscacert=ca.pem --tlscert=cert.pem --tlskey=key.pem -H=172.25.65.98:2376 version 

      # - name: if user and operator can ssh the camera.
      #   run: |
      #     ssh -v user@172.25.65.98  <<< "pass" 
      #     ssh -v operator@172.25.65.98 <<< "pass" 
      #   continue-on-error: true

      # - name: test as user.
      #   run: |
      #       curl -v -s --anyauth -u user:"pass" "http://172.25.65.98/axis-cgi/param.cgi?action=update&root.Network.SSH.Enabled=no" 
      #       ssh user@172.25.65.98 'command -v containerd >/dev/null 2>&1 && echo Compatible with Docker ACAP || echo Not compatible with Docker ACAP'
      #       curl -v -s --anyauth -u root:"pass" -k --header "Content-Type:application/json" http://172.25.65.98/axis-cgi/admin/systemlog.cgi?
      #   continue-on-error: true

      - name: UC2:3 use anchore to scan the image.
        run: |
          docker pull anchore/grype:v0.17
          docker pull axisecp/acap-native-sdk:1.3-armv7hf-ubuntu22.04
          docker images -a
          docker run --rm anchore/grype:v0.17 docker.io/axisecp/acap-native-sdk:1.3-armv7hf-ubuntu22.04
          
      - name: UC2:4-5 Secure Docker Hub for un-manupulating.
          # pull the image & name give it another name on local machine.
          # digest the images to get the checksum (comparison level)
          # should be the same sha256.
        run: |
          docker pull axisecp/acap-computer-vision-sdk:latest-aarch64-runtime && docker tag axisecp/acap-computer-vision-sdk:latest-aarch64-runtime my-image-axisecp:latest
          docker image inspect --format='{{.RepoDigests}}' axisecp/acap-computer-vision-sdk:latest-aarch64-runtime
          docker image inspect --format='{{.RepoDigests}}' my-image-axisecp 

      - name: UC2:8 Set the rights of daemon.json to only be writable by root.
        run: |
          sudo apt-get update && sudo apt-get install -y git && export PATH=$PATH:/usr/bin/git
          sshpass -p "pass" ssh root@172.25.65.98 'cd /usr/local/packages/dockerdwrapper/localdata/ && git pull origin main'
          echo $(pwd)
          chown root:root /usr/local/packages/dockerdwrapper/localdata/daemon.json
          chmod 600 /usr/local/packages/dockerdwrapper/localdata/daemon.json
        # sudo apt-get update && sudo apt-get install -y sshpass


        
