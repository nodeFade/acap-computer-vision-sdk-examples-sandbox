name: Build acap application
on:
  push: 
    paths:  
      - 'acap/**'
      - '.github/workflows/acap.yaml'

jobs:
  build:
    runs-on: ubuntu-latest
    env:   
      EXREPO: acap-computer-vision-examples-sandbox 
      WORKDIR: acap-computer-vision-sdk-examples-sandbox
    strategy:
      matrix:
        include:   
          - arch: aarch64
          # - arch: armv7hf

    steps:
      - uses: actions/checkout@v2
      - name: test to get architecture on another camera
        env: 
          DEVICE_IP: "${{ secrets.DEVICE_IP }}"
          DEVICE_PASSWORD: 'pass'
        run: |
          ok=$(curl -v -s --noproxy '*' --anyauth -u <device username: device password> -k --header "Content-Type: application/json" --request POST --data '{"apiVersion":"1.0","method":"getProperties", "params": {"propertyList": ["Architecture"]}}' http://${{ secrets.DEVICE_IP }}/axis-cgi/basicdeviceinfo.cgi)
          echo  "response from curl= $ok" 
          ok=${ok#*Architecture}
          echo "test=$(echo $ok | cut -d '"' -f 3)" >> $GITHUB_ENV
          echo ok=$(echo $ok | cut -d '"' -f 3)

      - name: get the requirements
        run: |
          echo $(pwd)
          docker buildx install
          docker buildx version
          docker --version

      # - name: verify root can remove daomen if installed.
      #   run: |
      #     curl --noproxy '*' -k --anyauth -u ${{ secrets.ROOT_USERNAME }}:${{ secrets.ROOT_PASSWORD}} --header "Content-Type: application/json"  "https://${{ secrets.DEVICE_IP }}/axis-cgi/applications/control.cgi?action=remove&package=dockerdwrapper"

      - name: installing daemon
        run: |
          cd /home/fadelb/actions-runner/_work/acap-computer-vision-sdk-examples-sandbox/acap-computer-vision-sdk-examples-sandbox
          echo $(pwd)
          sshpass -p "${{ secrets.ROOT_PASSWORD}}" ssh ${{ secrets.ROOT_USERNAME }}@${{ secrets.DEVICE_IP }} 'command -v containerd >/dev/null 2>&1 && echo Compatible with Docker ACAP || echo Not compatible with Docker ACAP'
          docker run --rm axisecp/docker-acap:latest-aarch64 ${{ secrets.DEVICE_IP }} ${{ secrets.ROOT_PASSWORD}} install
      
      - name: create certificate for handshake.
        run: | 
          cd /home/fadelb/actions-runner/_work/acap-computer-vision-sdk-examples-sandbox/acap-computer-vision-sdk-examples-sandbox/tls-certs
          echo $(pwd)
          chmod +x tls_setup.sh 
          echo $(pwd)
          sh -v tls_setup.sh ${{ secrets.DEVICE_IP }} dockerdwrapper

      - name: move the required files to required place.
        run: |
          cd /home/fadelb/actions-runner/_work/acap-computer-vision-sdk-examples-sandbox/acap-computer-vision-sdk-examples-sandbox/tls-certs
          cp ca.pem key.pem cert.pem ../../../../../
          cd ../../../../../
          mv ca.pem key.pem cert.pem ./.docker
          chmod 600 ./.docker    
          chmod -R 755 ./.docker 
        # chmod 600 to use file permissions to secure sensitive files by making them readable and writable only by the owner.
        # chmod -R 755 set permissions on a directory and all of its contents recursively using the -R option with the chmod.

      - name: get version client and server
        run: | 
          echo $(pwd)
          cd /home/fadelb/actions-runner/_work/acap-computer-vision-sdk-examples-sandbox/acap-computer-vision-sdk-examples-sandbox/tls-certs
          echo $(pwd)
          ls
          curl -s --anyauth -u ${{ secrets.ROOT_USERNAME }}:${{ secrets.ROOT_PASSWORD}} "http://${{ secrets.DEVICE_IP }}/axis-cgi/param.cgi?action=update&root.dockerdwrapper.UseTLS=yes"

      # TO RUN THIS COMMAND, MUST FIRST RUN THE DAEMON AND FILL THE SETTINGS FOR TLS.
      # docker -v --tlsverify --tlscacert=ca.pem --tlscert=cert.pem --tlskey=key.pem -H=172.25.65.98:2376 version 

      - name: if user and operator can ssh the camera.
        run: |
          sshpass -p "${{ secrets.ROOT_PASSWORD}}" ssh -v user@${{ secrets.DEVICE_IP }}
          sshpass -p "${{ secrets.ROOT_PASSWORD}}" ssh -v operator@${{ secrets.DEVICE_IP }}
        continue-on-error: true

      - name: configure the camera as root
        run: |
            curl --noproxy '*' -k --anyauth -u ${{ secrets.ROOT_USERNAME }}:${{ secrets.ROOT_PASSWORD}}--header "Content-Type: application/json"  "https://${{ secrets.DEVICE_IP }}/axis-cgi/applications/control.cgi?action=start&package=dockerdwrapper"
            curl -s --anyauth -u ${{ secrets.ROOT_USERNAME }}:${{ secrets.ROOT_PASSWORD}} "http://${{ secrets.DEVICE_IP }}/axis-cgi/param.cgi?action=update&root.Network.SSH.Enabled=yes"     
            curl -s --anyauth -u ${{ secrets.ROOT_USERNAME }}:${{ secrets.ROOT_PASSWORD}} "http://${{ secrets.DEVICE_IP }}/axis-cgi/param.cgi?action=update&root.dockerdwrapper.UseTLS=yes&root.dockerdwrapper.SDCardSupport=yes&root.dockerdwrapper.IPCSocket=no"    
          # curl -v -s --anyauth -u ${{ secrets.ROOT_USERNAME }}:{{ secrets.ROOT_PASSWORD}} -k --header "Content-Type:application/json" http://${{ secrets.DEVICE_IP }}/axis-cgi/admin/systemlog.cgi?
        continue-on-error: true

      - name: UC2:3 use anchore to scan the image.
          # Pull anchore image
          # build and run anchore feeding it with the requested ARCH image.  
        run: |
          docker pull anchore/grype:v0.17
          docker pull axisecp/acap-native-sdk:1.3-armv7hf-ubuntu22.04
          docker images -a
          docker run --rm anchore/grype:v0.17 docker.io/axisecp/acap-native-sdk:1.3-armv7hf-ubuntu22.04
          
      - name: UC2:4-5 Secure Docker Hub for un-manupulating.
          # pull the image & name give it another name on local machine.
          # digest the images to get the checksum (comparison level)
          # should be the same sha256.
        run: |
          docker pull axisecp/acap-computer-vision-sdk:latest-aarch64-runtime && docker tag axisecp/acap-computer-vision-sdk:latest-aarch64-runtime my-image-axisecp:latest
          docker image inspect --format='{{.RepoDigests}}' axisecp/acap-computer-vision-sdk:latest-aarch64-runtime
          docker image inspect --format='{{.RepoDigests}}' my-image-axisecp 

      - name: UC2:8 Set the rights of daemon.json to only be writable by root.
          # get the path ( you see Local machine path)
          # add th git to the machine to cover git in the path.
          # update apt-git, add git to github workflow runner path, get version to verify and then autoremove un-wanted packages.
          # ssh with pass and user to the camera and reach destination, plus change daemon file to 600 permission.
        run: |
          echo $(pwd)
          echo $PATH
          sshpass -p ${{ secrets.ROOT_PASSWORD}} ssh ${{ secrets.ROOT_USERNAME }}@${{ secrets.DEVICE_IP }} 'cd /usr/local/packages/dockerdwrapper/localdata/ && chown root:root /usr/local/packages/dockerdwrapper/localdata/daemon.json && chmod 600 /usr/local/packages/dockerdwrapper/localdata/daemon.json && ls -la'
        
      - name: UC3:9 Investigate how protected we are from local users accessing the dockerd socket.
          # with permissions set to 660. This means that only root and members of the docker group have read and write access to the socket file.
          # These commands ensure that only root and users belonging to the docker group can interact with the socket on the local machine. (if not granted in first step up)
        run: |
          cd /
          echo $(pwd)
          sudo chown root:docker /var/run/docker.sock
          sudo chmod g+w /var/run/docker.sock
          ls -l /var/run/docker.sock
          getent group docker
          
 
# todo..
# pip install paramiko
